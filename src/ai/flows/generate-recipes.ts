// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates a list of possible recipes based on identified ingredients.
 *
 * - generateRecipes - A function that generates recipes from identified ingredients.
 * - GenerateRecipesInput - The input type for the generateRecipes function.
 * - GenerateRecipesOutput - The return type for the generateRecipes function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateRecipesInputSchema = z.object({
  ingredients: z.array(z.string()).describe('A list of identified ingredients.'),
});
export type GenerateRecipesInput = z.infer<typeof GenerateRecipesInputSchema>;

const GenerateRecipesOutputSchema = z.object({
  recipes: z.array(
    z.object({
      title: z.string().describe('The title of the recipe.'),
      ingredients: z.array(z.string()).describe('The ingredients required for the recipe.'),
      instructions: z.string().describe('The instructions for preparing the recipe.'),
    })
  ).describe('A list of possible recipes.'),
});
export type GenerateRecipesOutput = z.infer<typeof GenerateRecipesOutputSchema>;

export async function generateRecipes(input: GenerateRecipesInput): Promise<GenerateRecipesOutput> {
  return generateRecipesFlow(input);
}

const generateRecipesPrompt = ai.definePrompt({
  name: 'generateRecipesPrompt',
  input: {
    schema: z.object({
      ingredients: z.array(z.string()).describe('A list of identified ingredients.'),
    }),
  },
  output: {
    schema: z.object({
      recipes: z.array(
        z.object({
          title: z.string().describe('The title of the recipe.'),
          ingredients: z.array(z.string()).describe('The ingredients required for the recipe.'),
          instructions: z.string().describe('The instructions for preparing the recipe.'),
        })
      ).describe('A list of possible recipes.'),
    }),
  },
  prompt: `You are a recipe generation expert. Given a list of ingredients, you will generate a list of possible recipes that can be made using those ingredients. Be creative and provide detailed instructions.

Ingredients:
{{#each ingredients}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

Recipes:`, 
});

const generateRecipesFlow = ai.defineFlow<
  typeof GenerateRecipesInputSchema,
  typeof GenerateRecipesOutputSchema
>({
  name: 'generateRecipesFlow',
  inputSchema: GenerateRecipesInputSchema,
  outputSchema: GenerateRecipesOutputSchema,
}, async input => {
  const {output} = await generateRecipesPrompt(input);
  return output!;
});
